// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: voice_message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_voice_5fmessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_voice_5fmessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_voice_5fmessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_voice_5fmessage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_voice_5fmessage_2eproto;
namespace voicechat {
class AudioData;
class AudioDataDefaultTypeInternal;
extern AudioDataDefaultTypeInternal _AudioData_default_instance_;
class ControlMessage;
class ControlMessageDefaultTypeInternal;
extern ControlMessageDefaultTypeInternal _ControlMessage_default_instance_;
class ServerResponse;
class ServerResponseDefaultTypeInternal;
extern ServerResponseDefaultTypeInternal _ServerResponse_default_instance_;
}  // namespace voicechat
PROTOBUF_NAMESPACE_OPEN
template<> ::voicechat::AudioData* Arena::CreateMaybeMessage<::voicechat::AudioData>(Arena*);
template<> ::voicechat::ControlMessage* Arena::CreateMaybeMessage<::voicechat::ControlMessage>(Arena*);
template<> ::voicechat::ServerResponse* Arena::CreateMaybeMessage<::voicechat::ServerResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace voicechat {

enum ControlMessage_MessageType : int {
  ControlMessage_MessageType_JOIN = 0,
  ControlMessage_MessageType_LEAVE = 1,
  ControlMessage_MessageType_MUTE = 2,
  ControlMessage_MessageType_UNMUTE = 3,
  ControlMessage_MessageType_LIST_ROOMS = 4,
  ControlMessage_MessageType_ControlMessage_MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ControlMessage_MessageType_ControlMessage_MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ControlMessage_MessageType_IsValid(int value);
constexpr ControlMessage_MessageType ControlMessage_MessageType_MessageType_MIN = ControlMessage_MessageType_JOIN;
constexpr ControlMessage_MessageType ControlMessage_MessageType_MessageType_MAX = ControlMessage_MessageType_LIST_ROOMS;
constexpr int ControlMessage_MessageType_MessageType_ARRAYSIZE = ControlMessage_MessageType_MessageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ControlMessage_MessageType_descriptor();
template<typename T>
inline const std::string& ControlMessage_MessageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ControlMessage_MessageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ControlMessage_MessageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ControlMessage_MessageType_descriptor(), enum_t_value);
}
inline bool ControlMessage_MessageType_Parse(
    const std::string& name, ControlMessage_MessageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ControlMessage_MessageType>(
    ControlMessage_MessageType_descriptor(), name, value);
}
enum ServerResponse_Status : int {
  ServerResponse_Status_SUCCESS = 0,
  ServerResponse_Status_ERROR = 1,
  ServerResponse_Status_ServerResponse_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ServerResponse_Status_ServerResponse_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ServerResponse_Status_IsValid(int value);
constexpr ServerResponse_Status ServerResponse_Status_Status_MIN = ServerResponse_Status_SUCCESS;
constexpr ServerResponse_Status ServerResponse_Status_Status_MAX = ServerResponse_Status_ERROR;
constexpr int ServerResponse_Status_Status_ARRAYSIZE = ServerResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServerResponse_Status_descriptor();
template<typename T>
inline const std::string& ServerResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ServerResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ServerResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ServerResponse_Status_descriptor(), enum_t_value);
}
inline bool ServerResponse_Status_Parse(
    const std::string& name, ServerResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ServerResponse_Status>(
    ServerResponse_Status_descriptor(), name, value);
}
// ===================================================================

class AudioData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:voicechat.AudioData) */ {
 public:
  inline AudioData() : AudioData(nullptr) {};
  virtual ~AudioData();

  AudioData(const AudioData& from);
  AudioData(AudioData&& from) noexcept
    : AudioData() {
    *this = ::std::move(from);
  }

  inline AudioData& operator=(const AudioData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioData& operator=(AudioData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AudioData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AudioData* internal_default_instance() {
    return reinterpret_cast<const AudioData*>(
               &_AudioData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AudioData& a, AudioData& b) {
    a.Swap(&b);
  }
  inline void Swap(AudioData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AudioData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AudioData* New() const final {
    return CreateMaybeMessage<AudioData>(nullptr);
  }

  AudioData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AudioData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AudioData& from);
  void MergeFrom(const AudioData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AudioData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "voicechat.AudioData";
  }
  protected:
  explicit AudioData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_voice_5fmessage_2eproto);
    return ::descriptor_table_voice_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAudioPayloadFieldNumber = 1,
    kUserIdFieldNumber = 3,
    kTimestampFieldNumber = 2,
    kSequenceNumberFieldNumber = 4,
  };
  // bytes audio_payload = 1;
  void clear_audio_payload();
  const std::string& audio_payload() const;
  void set_audio_payload(const std::string& value);
  void set_audio_payload(std::string&& value);
  void set_audio_payload(const char* value);
  void set_audio_payload(const void* value, size_t size);
  std::string* mutable_audio_payload();
  std::string* release_audio_payload();
  void set_allocated_audio_payload(std::string* audio_payload);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_audio_payload();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_audio_payload(
      std::string* audio_payload);
  private:
  const std::string& _internal_audio_payload() const;
  void _internal_set_audio_payload(const std::string& value);
  std::string* _internal_mutable_audio_payload();
  public:

  // string user_id = 3;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_user_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_user_id(
      std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // uint64 timestamp = 2;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 sequence_number = 4;
  void clear_sequence_number();
  ::PROTOBUF_NAMESPACE_ID::uint32 sequence_number() const;
  void set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sequence_number() const;
  void _internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:voicechat.AudioData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr audio_payload_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sequence_number_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_voice_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class ControlMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:voicechat.ControlMessage) */ {
 public:
  inline ControlMessage() : ControlMessage(nullptr) {};
  virtual ~ControlMessage();

  ControlMessage(const ControlMessage& from);
  ControlMessage(ControlMessage&& from) noexcept
    : ControlMessage() {
    *this = ::std::move(from);
  }

  inline ControlMessage& operator=(const ControlMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlMessage& operator=(ControlMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ControlMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ControlMessage* internal_default_instance() {
    return reinterpret_cast<const ControlMessage*>(
               &_ControlMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ControlMessage& a, ControlMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ControlMessage* New() const final {
    return CreateMaybeMessage<ControlMessage>(nullptr);
  }

  ControlMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ControlMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ControlMessage& from);
  void MergeFrom(const ControlMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "voicechat.ControlMessage";
  }
  protected:
  explicit ControlMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_voice_5fmessage_2eproto);
    return ::descriptor_table_voice_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ControlMessage_MessageType MessageType;
  static constexpr MessageType JOIN =
    ControlMessage_MessageType_JOIN;
  static constexpr MessageType LEAVE =
    ControlMessage_MessageType_LEAVE;
  static constexpr MessageType MUTE =
    ControlMessage_MessageType_MUTE;
  static constexpr MessageType UNMUTE =
    ControlMessage_MessageType_UNMUTE;
  static constexpr MessageType LIST_ROOMS =
    ControlMessage_MessageType_LIST_ROOMS;
  static inline bool MessageType_IsValid(int value) {
    return ControlMessage_MessageType_IsValid(value);
  }
  static constexpr MessageType MessageType_MIN =
    ControlMessage_MessageType_MessageType_MIN;
  static constexpr MessageType MessageType_MAX =
    ControlMessage_MessageType_MessageType_MAX;
  static constexpr int MessageType_ARRAYSIZE =
    ControlMessage_MessageType_MessageType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MessageType_descriptor() {
    return ControlMessage_MessageType_descriptor();
  }
  template<typename T>
  static inline const std::string& MessageType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MessageType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MessageType_Name.");
    return ControlMessage_MessageType_Name(enum_t_value);
  }
  static inline bool MessageType_Parse(const std::string& name,
      MessageType* value) {
    return ControlMessage_MessageType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 2,
    kRoomIdFieldNumber = 3,
    kMessageFieldNumber = 4,
    kTypeFieldNumber = 1,
  };
  // string user_id = 2;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_user_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_user_id(
      std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string room_id = 3;
  void clear_room_id();
  const std::string& room_id() const;
  void set_room_id(const std::string& value);
  void set_room_id(std::string&& value);
  void set_room_id(const char* value);
  void set_room_id(const char* value, size_t size);
  std::string* mutable_room_id();
  std::string* release_room_id();
  void set_allocated_room_id(std::string* room_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_room_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_room_id(
      std::string* room_id);
  private:
  const std::string& _internal_room_id() const;
  void _internal_set_room_id(const std::string& value);
  std::string* _internal_mutable_room_id();
  public:

  // string message = 4;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .voicechat.ControlMessage.MessageType type = 1;
  void clear_type();
  ::voicechat::ControlMessage_MessageType type() const;
  void set_type(::voicechat::ControlMessage_MessageType value);
  private:
  ::voicechat::ControlMessage_MessageType _internal_type() const;
  void _internal_set_type(::voicechat::ControlMessage_MessageType value);
  public:

  // @@protoc_insertion_point(class_scope:voicechat.ControlMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_voice_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class ServerResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:voicechat.ServerResponse) */ {
 public:
  inline ServerResponse() : ServerResponse(nullptr) {};
  virtual ~ServerResponse();

  ServerResponse(const ServerResponse& from);
  ServerResponse(ServerResponse&& from) noexcept
    : ServerResponse() {
    *this = ::std::move(from);
  }

  inline ServerResponse& operator=(const ServerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerResponse& operator=(ServerResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerResponse* internal_default_instance() {
    return reinterpret_cast<const ServerResponse*>(
               &_ServerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ServerResponse& a, ServerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerResponse* New() const final {
    return CreateMaybeMessage<ServerResponse>(nullptr);
  }

  ServerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerResponse& from);
  void MergeFrom(const ServerResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "voicechat.ServerResponse";
  }
  protected:
  explicit ServerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_voice_5fmessage_2eproto);
    return ::descriptor_table_voice_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ServerResponse_Status Status;
  static constexpr Status SUCCESS =
    ServerResponse_Status_SUCCESS;
  static constexpr Status ERROR =
    ServerResponse_Status_ERROR;
  static inline bool Status_IsValid(int value) {
    return ServerResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    ServerResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    ServerResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    ServerResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return ServerResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return ServerResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(const std::string& name,
      Status* value) {
    return ServerResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .voicechat.ServerResponse.Status status = 1;
  void clear_status();
  ::voicechat::ServerResponse_Status status() const;
  void set_status(::voicechat::ServerResponse_Status value);
  private:
  ::voicechat::ServerResponse_Status _internal_status() const;
  void _internal_set_status(::voicechat::ServerResponse_Status value);
  public:

  // @@protoc_insertion_point(class_scope:voicechat.ServerResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_voice_5fmessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AudioData

// bytes audio_payload = 1;
inline void AudioData::clear_audio_payload() {
  audio_payload_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AudioData::audio_payload() const {
  // @@protoc_insertion_point(field_get:voicechat.AudioData.audio_payload)
  return _internal_audio_payload();
}
inline void AudioData::set_audio_payload(const std::string& value) {
  _internal_set_audio_payload(value);
  // @@protoc_insertion_point(field_set:voicechat.AudioData.audio_payload)
}
inline std::string* AudioData::mutable_audio_payload() {
  // @@protoc_insertion_point(field_mutable:voicechat.AudioData.audio_payload)
  return _internal_mutable_audio_payload();
}
inline const std::string& AudioData::_internal_audio_payload() const {
  return audio_payload_.Get();
}
inline void AudioData::_internal_set_audio_payload(const std::string& value) {
  
  audio_payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AudioData::set_audio_payload(std::string&& value) {
  
  audio_payload_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:voicechat.AudioData.audio_payload)
}
inline void AudioData::set_audio_payload(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  audio_payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:voicechat.AudioData.audio_payload)
}
inline void AudioData::set_audio_payload(const void* value,
    size_t size) {
  
  audio_payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:voicechat.AudioData.audio_payload)
}
inline std::string* AudioData::_internal_mutable_audio_payload() {
  
  return audio_payload_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AudioData::release_audio_payload() {
  // @@protoc_insertion_point(field_release:voicechat.AudioData.audio_payload)
  return audio_payload_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AudioData::set_allocated_audio_payload(std::string* audio_payload) {
  if (audio_payload != nullptr) {
    
  } else {
    
  }
  audio_payload_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), audio_payload,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:voicechat.AudioData.audio_payload)
}
inline std::string* AudioData::unsafe_arena_release_audio_payload() {
  // @@protoc_insertion_point(field_unsafe_arena_release:voicechat.AudioData.audio_payload)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return audio_payload_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AudioData::unsafe_arena_set_allocated_audio_payload(
    std::string* audio_payload) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (audio_payload != nullptr) {
    
  } else {
    
  }
  audio_payload_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      audio_payload, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:voicechat.AudioData.audio_payload)
}

// uint64 timestamp = 2;
inline void AudioData::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AudioData::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AudioData::timestamp() const {
  // @@protoc_insertion_point(field_get:voicechat.AudioData.timestamp)
  return _internal_timestamp();
}
inline void AudioData::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void AudioData::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:voicechat.AudioData.timestamp)
}

// string user_id = 3;
inline void AudioData::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AudioData::user_id() const {
  // @@protoc_insertion_point(field_get:voicechat.AudioData.user_id)
  return _internal_user_id();
}
inline void AudioData::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:voicechat.AudioData.user_id)
}
inline std::string* AudioData::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:voicechat.AudioData.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& AudioData::_internal_user_id() const {
  return user_id_.Get();
}
inline void AudioData::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AudioData::set_user_id(std::string&& value) {
  
  user_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:voicechat.AudioData.user_id)
}
inline void AudioData::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:voicechat.AudioData.user_id)
}
inline void AudioData::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:voicechat.AudioData.user_id)
}
inline std::string* AudioData::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AudioData::release_user_id() {
  // @@protoc_insertion_point(field_release:voicechat.AudioData.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AudioData::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:voicechat.AudioData.user_id)
}
inline std::string* AudioData::unsafe_arena_release_user_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:voicechat.AudioData.user_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return user_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AudioData::unsafe_arena_set_allocated_user_id(
    std::string* user_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      user_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:voicechat.AudioData.user_id)
}

// uint32 sequence_number = 4;
inline void AudioData::clear_sequence_number() {
  sequence_number_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AudioData::_internal_sequence_number() const {
  return sequence_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AudioData::sequence_number() const {
  // @@protoc_insertion_point(field_get:voicechat.AudioData.sequence_number)
  return _internal_sequence_number();
}
inline void AudioData::_internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sequence_number_ = value;
}
inline void AudioData::set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sequence_number(value);
  // @@protoc_insertion_point(field_set:voicechat.AudioData.sequence_number)
}

// -------------------------------------------------------------------

// ControlMessage

// .voicechat.ControlMessage.MessageType type = 1;
inline void ControlMessage::clear_type() {
  type_ = 0;
}
inline ::voicechat::ControlMessage_MessageType ControlMessage::_internal_type() const {
  return static_cast< ::voicechat::ControlMessage_MessageType >(type_);
}
inline ::voicechat::ControlMessage_MessageType ControlMessage::type() const {
  // @@protoc_insertion_point(field_get:voicechat.ControlMessage.type)
  return _internal_type();
}
inline void ControlMessage::_internal_set_type(::voicechat::ControlMessage_MessageType value) {
  
  type_ = value;
}
inline void ControlMessage::set_type(::voicechat::ControlMessage_MessageType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:voicechat.ControlMessage.type)
}

// string user_id = 2;
inline void ControlMessage::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ControlMessage::user_id() const {
  // @@protoc_insertion_point(field_get:voicechat.ControlMessage.user_id)
  return _internal_user_id();
}
inline void ControlMessage::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:voicechat.ControlMessage.user_id)
}
inline std::string* ControlMessage::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:voicechat.ControlMessage.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& ControlMessage::_internal_user_id() const {
  return user_id_.Get();
}
inline void ControlMessage::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ControlMessage::set_user_id(std::string&& value) {
  
  user_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:voicechat.ControlMessage.user_id)
}
inline void ControlMessage::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:voicechat.ControlMessage.user_id)
}
inline void ControlMessage::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:voicechat.ControlMessage.user_id)
}
inline std::string* ControlMessage::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ControlMessage::release_user_id() {
  // @@protoc_insertion_point(field_release:voicechat.ControlMessage.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ControlMessage::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:voicechat.ControlMessage.user_id)
}
inline std::string* ControlMessage::unsafe_arena_release_user_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:voicechat.ControlMessage.user_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return user_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ControlMessage::unsafe_arena_set_allocated_user_id(
    std::string* user_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      user_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:voicechat.ControlMessage.user_id)
}

// string room_id = 3;
inline void ControlMessage::clear_room_id() {
  room_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ControlMessage::room_id() const {
  // @@protoc_insertion_point(field_get:voicechat.ControlMessage.room_id)
  return _internal_room_id();
}
inline void ControlMessage::set_room_id(const std::string& value) {
  _internal_set_room_id(value);
  // @@protoc_insertion_point(field_set:voicechat.ControlMessage.room_id)
}
inline std::string* ControlMessage::mutable_room_id() {
  // @@protoc_insertion_point(field_mutable:voicechat.ControlMessage.room_id)
  return _internal_mutable_room_id();
}
inline const std::string& ControlMessage::_internal_room_id() const {
  return room_id_.Get();
}
inline void ControlMessage::_internal_set_room_id(const std::string& value) {
  
  room_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ControlMessage::set_room_id(std::string&& value) {
  
  room_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:voicechat.ControlMessage.room_id)
}
inline void ControlMessage::set_room_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  room_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:voicechat.ControlMessage.room_id)
}
inline void ControlMessage::set_room_id(const char* value,
    size_t size) {
  
  room_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:voicechat.ControlMessage.room_id)
}
inline std::string* ControlMessage::_internal_mutable_room_id() {
  
  return room_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ControlMessage::release_room_id() {
  // @@protoc_insertion_point(field_release:voicechat.ControlMessage.room_id)
  return room_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ControlMessage::set_allocated_room_id(std::string* room_id) {
  if (room_id != nullptr) {
    
  } else {
    
  }
  room_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), room_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:voicechat.ControlMessage.room_id)
}
inline std::string* ControlMessage::unsafe_arena_release_room_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:voicechat.ControlMessage.room_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return room_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ControlMessage::unsafe_arena_set_allocated_room_id(
    std::string* room_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (room_id != nullptr) {
    
  } else {
    
  }
  room_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      room_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:voicechat.ControlMessage.room_id)
}

// string message = 4;
inline void ControlMessage::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ControlMessage::message() const {
  // @@protoc_insertion_point(field_get:voicechat.ControlMessage.message)
  return _internal_message();
}
inline void ControlMessage::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:voicechat.ControlMessage.message)
}
inline std::string* ControlMessage::mutable_message() {
  // @@protoc_insertion_point(field_mutable:voicechat.ControlMessage.message)
  return _internal_mutable_message();
}
inline const std::string& ControlMessage::_internal_message() const {
  return message_.Get();
}
inline void ControlMessage::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ControlMessage::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:voicechat.ControlMessage.message)
}
inline void ControlMessage::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:voicechat.ControlMessage.message)
}
inline void ControlMessage::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:voicechat.ControlMessage.message)
}
inline std::string* ControlMessage::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ControlMessage::release_message() {
  // @@protoc_insertion_point(field_release:voicechat.ControlMessage.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ControlMessage::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:voicechat.ControlMessage.message)
}
inline std::string* ControlMessage::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:voicechat.ControlMessage.message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ControlMessage::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:voicechat.ControlMessage.message)
}

// -------------------------------------------------------------------

// ServerResponse

// .voicechat.ServerResponse.Status status = 1;
inline void ServerResponse::clear_status() {
  status_ = 0;
}
inline ::voicechat::ServerResponse_Status ServerResponse::_internal_status() const {
  return static_cast< ::voicechat::ServerResponse_Status >(status_);
}
inline ::voicechat::ServerResponse_Status ServerResponse::status() const {
  // @@protoc_insertion_point(field_get:voicechat.ServerResponse.status)
  return _internal_status();
}
inline void ServerResponse::_internal_set_status(::voicechat::ServerResponse_Status value) {
  
  status_ = value;
}
inline void ServerResponse::set_status(::voicechat::ServerResponse_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:voicechat.ServerResponse.status)
}

// string message = 2;
inline void ServerResponse::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ServerResponse::message() const {
  // @@protoc_insertion_point(field_get:voicechat.ServerResponse.message)
  return _internal_message();
}
inline void ServerResponse::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:voicechat.ServerResponse.message)
}
inline std::string* ServerResponse::mutable_message() {
  // @@protoc_insertion_point(field_mutable:voicechat.ServerResponse.message)
  return _internal_mutable_message();
}
inline const std::string& ServerResponse::_internal_message() const {
  return message_.Get();
}
inline void ServerResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ServerResponse::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:voicechat.ServerResponse.message)
}
inline void ServerResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:voicechat.ServerResponse.message)
}
inline void ServerResponse::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:voicechat.ServerResponse.message)
}
inline std::string* ServerResponse::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ServerResponse::release_message() {
  // @@protoc_insertion_point(field_release:voicechat.ServerResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServerResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:voicechat.ServerResponse.message)
}
inline std::string* ServerResponse::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:voicechat.ServerResponse.message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ServerResponse::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:voicechat.ServerResponse.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace voicechat

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::voicechat::ControlMessage_MessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::voicechat::ControlMessage_MessageType>() {
  return ::voicechat::ControlMessage_MessageType_descriptor();
}
template <> struct is_proto_enum< ::voicechat::ServerResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::voicechat::ServerResponse_Status>() {
  return ::voicechat::ServerResponse_Status_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_voice_5fmessage_2eproto
